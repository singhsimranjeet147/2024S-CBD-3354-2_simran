# cloudbuild.yaml

logsBucket: gs://inclass_bucket1 # The Cloud Storage bucket for build logs

substitutions:
  _REGION: 'us-central1'  # Default region, can be overridden in the trigger
  _CLUSTER_NAME: 'simran'  # Default cluster name, can be overridden in the trigger

steps:
  # Step 1: Create namespace for frontend
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['create', 'namespace', 'frontend-namespace']
    id: 'create-frontend-namespace'

  # Step 2: Build Docker image for the frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/in-class-activity-424123/frontend:latest', './frontend']
    id: 'build-frontend'

  # Step 3: Push the frontend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/in-class-activity-424123/frontend:latest']
    id: 'push-frontend'
    waitFor:
      - 'build-frontend'

  # Step 4: Create namespace for backend
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['create', 'namespace', 'backend-namespace']
    id: 'create-backend-namespace'
    waitFor:
      - 'push-frontend'  # Wait for frontend build and push to complete

  # Step 5: Build Docker image for the backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/in-class-activity-424123/backend:latest', './backend']
    id: 'build-backend'
    waitFor:
      - 'create-backend-namespace'

  # Step 6: Push the backend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/in-class-activity-424123/backend:latest']
    id: 'push-backend'
    waitFor:
      - 'build-backend'

  # Step 7: Check if the GKE cluster exists
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if gcloud container clusters describe "${_CLUSTER_NAME}" --region "${_REGION}" > /dev/null 2>&1; then
          echo "Cluster already exists."
          echo "CLUSTER_EXISTS=true" > /workspace/cluster_exists.txt
        else
          echo "Cluster does not exist."
          echo "CLUSTER_EXISTS=false" > /workspace/cluster_exists.txt
        fi
    id: 'check-cluster'
    waitFor:
      - 'push-backend'

  # Step 8: Extract cluster credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container clusters get-credentials "${_CLUSTER_NAME}" --region "${_REGION}"
    id: 'get-credentials'
    waitFor:
      - 'check-cluster'

  # Step 9: Deploy the frontend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/deployment.yaml']
    id: 'deploy-frontend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
      - 'NAMESPACE=frontend-namespace'
    waitFor:
      - 'get-credentials'

  # Step 10: Deploy the backend application to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/deployment.yaml']
    id: 'deploy-backend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
      - 'NAMESPACE=backend-namespace'
    waitFor:
      - 'deploy-frontend'

  # Step 11: Expose the frontend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'frontend/service.yaml']
    id: 'expose-frontend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
      - 'NAMESPACE=frontend-namespace'
    waitFor:
      - 'deploy-backend'

  # Step 12: Expose the backend deployment with a service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'backend/service.yaml']
    id: 'expose-backend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
      - 'NAMESPACE=backend-namespace'
    waitFor:
      - 'expose-frontend-service'

images:
  - 'gcr.io/in-class-activity-424123/frontend:latest'
  - 'gcr.io/in-class-activity-424123/backend:latest'
