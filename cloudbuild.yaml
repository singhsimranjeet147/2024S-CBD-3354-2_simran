# Replace '<your-bucket-name>' with your actual bucket name
logsBucket: gs://inclass_bucket1

steps:
  # Step 1: Build the frontend image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/in-class-activity-424123/frontend-image:latest', '.']
    dir: 'frontend'  # Ensure this points to the correct directory

  # Step 2: Push the frontend image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/in-class-activity-424123/frontend-image:latest']

  # Step 3: Build the backend image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/in-class-activity-424123/backend-image:latest', '.']
    dir: 'backend'  # Ensure this points to the correct directory

  # Step 4: Push the backend image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/in-class-activity-424123/backend-image:latest']

  # Step 5: Delete existing backend deployment and then apply new configuration
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'delete'
      - '-f'
      - 'backend/deployment.yaml'  # Replace with your backend deployment file path
      - '--ignore-not-found=true'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1'  # Replace with your actual compute zone
      - 'CLOUDSDK_CONTAINER_CLUSTER=simran'      # Replace with your actual cluster name

  # Step 6: Delete existing frontend deployment and then apply new configuration
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'delete'
      - '-f'
      - 'frontend/deployment.yaml'  # Replace with your frontend deployment file path
      - '--ignore-not-found=true'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1'  # Replace with your actual compute zone
      - 'CLOUDSDK_CONTAINER_CLUSTER=simran'      # Replace with your actual cluster name

  # Step 7: Deploy backend to Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'backend/deployment.yaml'  # Replace with your backend deployment file path
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1'  # Replace with your actual compute zone
      - 'CLOUDSDK_CONTAINER_CLUSTER=simran'      # Replace with your actual cluster name

  # Step 8: Deploy frontend to Kubernetes
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'frontend/deployment.yaml'  # Replace with your frontend deployment file path
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1'  # Replace with your actual compute zone
      - 'CLOUDSDK_CONTAINER_CLUSTER=simran'      # Replace with your actual cluster name

  # Step 9: Expose the backend service (if not exists)
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo '
        apiVersion: v1
        kind: Service
        metadata:
          name: backappdb-deployment
          labels:
            app: backdbapp
        spec:
          type: LoadBalancer
          selector:
            app: backdbapp
          ports:
          - port: 5000
            targetPort: 5000
        ' | kubectl apply -f -
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1'  # Replace with your actual compute zone
      - 'CLOUDSDK_CONTAINER_CLUSTER=simran'      # Replace with your actual cluster name

  # Step 10: Expose the frontend service (if not exists)
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo '
        apiVersion: v1
        kind: Service
        metadata:
          name: frontdbapp-deployment
          labels:
            app: dbfrontapp
        spec:
          type: LoadBalancer
          selector:
            app: frontapp
          ports:
          - port: 80
            targetPort: 80
        ' | kubectl apply -f -
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1'  # Replace with your actual compute zone
      - 'CLOUDSDK_CONTAINER_CLUSTER=simran'      # Replace with your actual cluster name
