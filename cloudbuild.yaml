# cloudbuild.yaml

logsBucket: gs://inclass_bucket1  # The Cloud Storage bucket for build logs

substitutions:
  _REGION: 'us-central1'  # Default region, can be overridden in the trigger
  _CLUSTER_NAME: 'simran'  # Default cluster name, can be overridden in the trigger

steps:
  # Step 1: Build Docker image for the frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/in-class-activity-424123/frontend:latest', './frontend']
    id: 'build-frontend'

  # Step 2: Build Docker image for the backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/in-class-activity-424123/backend:latest', './backend']
    id: 'build-backend'
    waitFor:
      - 'build-frontend'

  # Step 3: Push the frontend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/in-class-activity-424123/frontend:latest']
    id: 'push-frontend'
    waitFor:
      - 'build-backend'

  # Step 4: Push the backend image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/in-class-activity-424123/backend:latest']
    id: 'push-backend'
    waitFor:
      - 'push-frontend'

  # Step 5: Check if the GKE cluster exists
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if gcloud container clusters describe "${_CLUSTER_NAME}" --region "${_REGION}" > /dev/null 2>&1; then
          echo "Cluster already exists."
          echo "CLUSTER_EXISTS=true" > /workspace/cluster_exists.txt
        else
          echo "Cluster does not exist."
          echo "CLUSTER_EXISTS=false" > /workspace/cluster_exists.txt
        fi
    id: 'check-cluster'
    waitFor:
      - 'push-backend'
  # Step 7: Create frontend namespace (if not exists)
    - name: 'gcr.io/cloud-builders/kubectl'
      args:
        - 'create'
        - 'namespace'
        - 'frontend'
      id: 'create-frontend-ns'
      ignoreErrors: true  # Ignore errors if namespace already exists
  # Step 6: Extract cluster credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container clusters get-credentials "${_CLUSTER_NAME}" --region "${_REGION}"
    id: 'get-credentials'
    waitFor:
      - 'check-cluster'
  # Step 9: Create backend namespace (if not exists)
    - name: 'gcr.io/cloud-builders/kubectl'
      args:
        - 'create'
        - 'namespace'
        - 'backend'
      id: 'create-backend-ns'
      ignoreErrors: true  # Ignore errors if namespace already exists
  # Step 8: Deploy the frontend application to GKE (with namespace)
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'frontend/deployment.yaml'
      - '--namespace=frontend'
    id: 'deploy-frontend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'get-credentials'
      - 'create-frontend-ns'  # Wait for namespace creation

  

  # Step 10: Deploy the backend application to GKE (with namespace)
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'backend/deployment.yaml'
      - '--namespace=backend'
    id: 'deploy-backend'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'deploy-frontend'
      - 'create-backend-ns'  # Wait for namespace creation

  # Step 11: Expose the frontend deployment with a service (with namespace)
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'frontend/service.yaml'
      - '--namespace=frontend'
    id: 'expose-frontend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'deploy-backend'

  # Step 12: Expose the backend deployment with a service (with namespace)
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'backend/service.yaml'
      - '--namespace=backend'
    id: 'expose-backend-service'
    env:
      - 'CLOUDSDK_COMPUTE_REGION=${_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
    waitFor:
      - 'expose-frontend-service'

images:
  - 'gcr.io/in-class-activity-424123/frontend:latest'
  - 'gcr.io/in-class-activity-424123/backend:latest'
